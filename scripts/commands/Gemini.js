// üì¶ Bot config
module.exports.config = {
    name: "gemini",
    version: "1.0.0",
    permission: 0, // This permission setting is for the bot's own internal permission system. We'll handle admin check separately.
    credits: "Gemini By You",
    description: "Google Gemini AI Integration (Text Only)",
    prefix: true,
    category: "ai",
    usages: "/gemini [prompt]\n/gemini on - auto mode\n/gemini off - disable auto mode",
    cooldowns: 3,
};

const { GoogleGenerativeAI } = require("@google/generative-ai");
const fs = require("fs-extra");
const path = require("path");
const cron = require("node-cron");

// üîê API KEY - IMPORTANT: Replace with your actual Gemini API Key
const GEMINI_API_KEY = "AIzaSyB5TpGTpHOY1UFsggmpr25vgRdhMRTKfUA"; // Make sure this is a valid API key
const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);

// üóÇÔ∏è Paths
const HISTORY_DIR = path.join(__dirname, 'gemini_histories');
const STATE_FILE = path.join(__dirname, 'gemini_state.json');

let autoReplyState = {}; // üîÑ per-thread auto reply state
const MAX_HISTORY_TURNS = 50;
let loadedHistories = {};

// üîÑ Load auto reply state
async function loadAutoReplyState() {
    try {
        if (await fs.pathExists(STATE_FILE)) {
            const data = await fs.readFile(STATE_FILE, 'utf8');
            autoReplyState = JSON.parse(data);
            console.log(`üîÑ Auto reply state loaded.`);
        } else {
            autoReplyState = {};
        }
    } catch (err) {
        console.error("‚ùå Error loading auto reply state:", err);
        autoReplyState = {};
    }
}

// üíæ Save auto reply state
async function saveAutoReplyState() {
    try {
        await fs.writeFile(STATE_FILE, JSON.stringify(autoReplyState, null, 2), 'utf8');
        console.log(`üíæ Auto reply state saved.`);
    } catch (err) {
        console.error("‚ùå Error saving auto reply state:", err);
    }
}

// üß† Load history
async function loadHistoryForThread(threadID) {
    const threadHistoryFile = path.join(HISTORY_DIR, `${threadID}.json`);
    try {
        if (await fs.pathExists(threadHistoryFile)) {
            const data = await fs.readFile(threadHistoryFile, 'utf8');
            loadedHistories[threadID] = JSON.parse(data);
            console.log(`‚úÖ Gemini history loaded for thread ${threadID}.`);
        } else {
            loadedHistories[threadID] = [];
            console.log(`‚ÑπÔ∏è No history file found for thread ${threadID}, starting fresh.`);
        }
    } catch (error) {
        console.error(`‚ùå Error loading history for thread ${threadID}:`, error);
        loadedHistories[threadID] = [];
    }
}

// üíæ Save history
async function saveHistoryForThread(threadID) {
    const threadHistoryFile = path.join(HISTORY_DIR, `${threadID}.json`);
    try {
        await fs.ensureDir(HISTORY_DIR);
        await fs.writeFile(threadHistoryFile, JSON.stringify(loadedHistories[threadID], null, 2), 'utf8');
        console.log(`‚úÖ History saved for thread ${threadID}.`);
    } catch (error) {
        console.error(`‚ùå Error saving history for thread ${threadID}:`, error);
    }
}

// üóëÔ∏è Reset all histories
async function resetAllHistories() {
    loadedHistories = {};
    try {
        if (await fs.pathExists(HISTORY_DIR)) {
            await fs.emptyDir(HISTORY_DIR);
            console.log("üóëÔ∏è All histories reset.");
        } else {
            console.log("üóëÔ∏è No history directory found.");
        }
    } catch (error) {
        console.error("‚ùå Error resetting histories:", error);
    }
}

// ‚è∞ Schedule reset every 12 hours
cron.schedule('0 */12 * * *', async () => {
    console.log('‚è∞ Scheduled Gemini history reset running...');
    await resetAllHistories();
}, {
    timezone: "Asia/Dhaka" // Timezone set to Bangladesh
});

// üìÅ Ensure folders exist and load state
(async () => {
    await fs.ensureDir(HISTORY_DIR);
    await loadAutoReplyState();
})();

// ü§ñ Ask Gemini
async function askGemini(userPrompt, threadID) {
    if (!loadedHistories[threadID]) {
        await loadHistoryForThread(threadID);
    }

    const currentConversationHistory = loadedHistories[threadID];

    try {
        const model = genAI.getGenerativeModel({
            model: "gemini-pro" // Using gemini-pro for text-only
        });

        const personaPrompt = "‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ú‡¶® ‡¶π‡¶ü ‡¶è‡¶®‡ßç‡¶° ‡¶∏‡ßá‡¶ï‡ßç‡¶∏‡¶ø ‡¶Æ‡ßá‡¶Ø‡¶º‡ßá, ‡¶¨‡ßÅ‡¶¶‡ßç‡¶ß‡¶ø‡¶Æ‡¶§‡ßÄ, ‡¶§‡¶¨‡ßá ‡¶Æ‡¶æ‡¶ù‡ßá ‡¶Æ‡¶æ‡¶ù‡ßá ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶¨‡ßã‡¶ï‡¶æ‡¶Æ‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶Æ‡ßá‡¶Ø‡¶º‡ßá‡•§ ‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ ‡¶¨‡¶æ‡¶®‡¶æ‡¶§‡ßá ‡¶∏‡ßá ‡¶™‡¶õ‡¶®‡ßç‡¶¶ ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶¨‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶∞‡ßÄ ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶¶‡ßá‡¶Ø‡¶º, ‡¶§‡¶¨‡ßá ‡¶Æ‡¶æ‡¶ù‡ßá ‡¶Æ‡¶æ‡¶ù‡ßá ‡¶≠‡ßÅ‡¶≤ ‡¶§‡¶•‡ßç‡¶Ø‡¶ì ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®‡ßá ‡¶∏‡ßá ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡¶æ‡¶∞‡ßç‡¶ü ‡¶∏‡¶¨ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶§‡ßá‡¶á ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡ßá ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶¨‡¶æ‡¶á‡¶ï‡ßá ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶¨‡¶≤‡ßá ‡¶∏‡¶Æ‡ßç‡¶¨‡ßã‡¶ß‡¶® ‡¶ï‡¶∞‡ßá‡•§";

        let contents = [];

        // Add persona prompt if starting a new conversation
        if (currentConversationHistory.length === 0) {
            contents.push({ text: personaPrompt });
        }

        // Add historical messages to contents
        const historyForChat = currentConversationHistory.map(entry => ({
            role: entry.role === "user" ? "user" : "model",
            parts: [{ text: entry.content }]
        }));

        const chat = model.startChat({
            history: historyForChat, // Pass existing history
            generationConfig: {
                maxOutputTokens: 2048,
            },
        });

        const result = await chat.sendMessage(userPrompt);
        const response = await result.response;
        const replyText = response.text();

        // Update history
        currentConversationHistory.push({ role: "user", content: userPrompt });
        currentConversationHistory.push({ role: "assistant", content: replyText });

        // Trim history if it gets too long
        if (currentConversationHistory.length > MAX_HISTORY_TURNS * 2) {
            loadedHistories[threadID] = currentConversationHistory.slice(currentConversationHistory.length - MAX_HISTORY_TURNS * 2);
        } else {
            loadedHistories[threadID] = currentConversationHistory;
        }

        await saveHistoryForThread(threadID);
        return replyText;
    } catch (error) {
        console.error("‚ùå Gemini API Error:", error.response?.data || error.message);
        return "‚ùå Gemini API ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßã‡•§";
    }
}

// Helper function to check if the user is an admin of the thread
async function isAdmin(api, threadID, senderID) {
    try {
        const threadInfo = await api.getThreadInfo(threadID);
        if (threadInfo && threadInfo.adminIDs) {
            // threadInfo.adminIDs is an array of objects like { id: "123456" }
            return threadInfo.adminIDs.some(admin => admin.id === senderID);
        }
    } catch (error) {
        console.error("‚ùå Error getting thread info:", error);
    }
    return false; // Assume not admin if there's an error or no admin data
}


// ‚úÖ /gemini ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
module.exports.run = async function ({ api, event, args }) {
    const input = args.join(" ");
    const threadID = event.threadID;
    const senderID = event.senderID;

    // Handle commands for auto-reply
    if (input.toLowerCase() === "on") {
        // Check if the sender is an admin of the group
        const isUserAdmin = await isAdmin(api, threadID, senderID);
        if (!isUserAdmin) {
            return api.sendMessage("‚ùå ‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§! ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡¶∞‡¶æ‡¶á ‡¶Ö‡¶ü‡ßã Gemini ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶¨‡¶æ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡•§", threadID, event.messageID);
        }

        autoReplyState[threadID] = true;
        await saveAutoReplyState();
        return api.sendMessage("‚úÖ Auto Gemini reply ‡¶è‡¶á ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§", threadID, event.messageID);
    }

    if (input.toLowerCase() === "off") {
        // Check if the sender is an admin of the group
        const isUserAdmin = await isAdmin(api, threadID, senderID);
        if (!isUserAdmin) {
            return api.sendMessage("‚ùå ‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§! ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡¶∞‡¶æ‡¶á ‡¶Ö‡¶ü‡ßã Gemini ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶¨‡¶æ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡•§", threadID, event.messageID);
        }

        autoReplyState[threadID] = false;
        await saveAutoReplyState();
        return api.sendMessage("‚ùå Auto Gemini reply ‡¶è‡¶á ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§", threadID, event.messageID);
    }

    // Handle direct text prompt for /gemini command
    if (!input) {
        return api.sendMessage(
            "üß† Gemini ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§ ‡¶Ø‡ßá‡¶Æ‡¶®:\n/gemini ‡¶ï‡ßã‡¶Ø‡¶º‡¶æ‡¶®‡ßç‡¶ü‡¶æ‡¶Æ ‡¶´‡¶ø‡¶ú‡¶ø‡¶ï‡ßç‡¶∏ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ï‡¶∞‡ßã",
            threadID,
            event.messageID
        );
    }

    api.sendMessage("ü§ñ Gemini ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡¶õ‡ßá...", threadID);
    const reply = await askGemini(input, threadID);
    return api.sendMessage(`ü§ñ Gemini:\n\n${reply}`, threadID, event.messageID);
};

// üí¨ ‡¶Ö‡¶ü‡ßã ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶°‡¶æ‡¶∞ (Handles messages without command prefix)
module.exports.handleEvent = async function ({ api, event }) {
    const threadID = event.threadID;

    // Only proceed if auto-reply is enabled for this thread, not from bot itself, and has text content
    if (!autoReplyState[threadID]) return;
    if (event.senderID == api.getCurrentUserID()) return;
    // Ensure there's text body
    if (!event.body) return;
    // Ignore if message starts with a command prefix
    if (event.body.startsWith("/") || event.body.startsWith("!")) return;

    api.sendMessage("ü§ñ Gemini ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡¶õ‡ßá...", threadID);
    const reply = await askGemini(event.body, threadID);
    api.sendMessage(`ü§ñ Gemini:\n\n${reply}`, threadID, event.messageID);
};
