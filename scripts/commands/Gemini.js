// ЁЯУж Bot config
module.exports.config = {
    name: "gemini",
    version: "1.0.0",
    permission: 0,
    credits: "Gemini By You",
    description: "Google Gemini AI Integration (Text Only)", 
    prefix: true,
    category: "ai",
    usages: "/gemini [prompt]\n/gemini on - auto mode\n/gemini off - disable auto mode",
    cooldowns: 3,
};

const { GoogleGenerativeAI } = require("@google/generative-ai");
const fs = require("fs-extra");
const path = require("path");
const cron = require("node-cron");

// ЁЯФР API KEY - IMPORTANT: Replace with your actual Gemini API Key
const GEMINI_API_KEY = "AIzaSyB5TpGTpHOY1UFsggmpr25vgRdhMRTKfUA"; 
const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);

// ЁЯЧВя╕П Paths
const HISTORY_DIR = path.join(__dirname, 'gemini_histories');

let autoReplyState = {}; // ЁЯФД 
const MAX_HISTORY_TURNS = 50;
let loadedHistories = {};

// ЁЯза рж╣рж┐рж╕рзНржЯрж░рж┐ рж▓рзЛржб ржХрж░рзБржи
async function loadHistoryForThread(threadID) {
    const threadHistoryFile = path.join(HISTORY_DIR, `${threadID}.json`);
    try {
        if (await fs.pathExists(threadHistoryFile)) {
            const data = await fs.readFile(threadHistoryFile, 'utf8');
            loadedHistories[threadID] = JSON.parse(data);
            console.log(`тЬЕ ржерзНрж░рзЗржб ${threadID} ржПрж░ ржЬржирзНржп ржЬрзЗржорж┐ржирж┐ рж╣рж┐рж╕рзНржЯрж░рж┐ рж▓рзЛржб рж╣ржпрж╝рзЗржЫрзЗред`);
        } else {
            loadedHistories[threadID] = [];
            console.log(`тД╣я╕П ржерзНрж░рзЗржб ${threadID} ржПрж░ ржЬржирзНржп ржХрзЛржирзЛ рж╣рж┐рж╕рзНржЯрж░рж┐ ржлрж╛ржЗрж▓ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐, ржирждрзБржи ржХрж░рзЗ рж╢рзБрж░рзБ рж╣ржЪрзНржЫрзЗред`);
        }
    } catch (error) {
        console.error(`тЭМ ржерзНрж░рзЗржб ${threadID} ржПрж░ ржЬржирзНржп рж╣рж┐рж╕рзНржЯрж░рж┐ рж▓рзЛржб ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ:`, error);
        loadedHistories[threadID] = [];
    }
}

// ЁЯТ╛ рж╣рж┐рж╕рзНржЯрж░рж┐ рж╕рзЗржн ржХрж░рзБржи
async function saveHistoryForThread(threadID) {
    const threadHistoryFile = path.join(HISTORY_DIR, `${threadID}.json`);
    try {
        await fs.ensureDir(HISTORY_DIR);
        await fs.writeFile(threadHistoryFile, JSON.stringify(loadedHistories[threadID], null, 2), 'utf8');
        console.log(`тЬЕ ржерзНрж░рзЗржб ${threadID} ржПрж░ ржЬржирзНржп рж╣рж┐рж╕рзНржЯрж░рж┐ рж╕рзЗржн рж╣ржпрж╝рзЗржЫрзЗред`);
    } catch (error) {
        console.error(`тЭМ ржерзНрж░рзЗржб ${threadID} ржПрж░ ржЬржирзНржп рж╣рж┐рж╕рзНржЯрж░рж┐ рж╕рзЗржн ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ:`, error);
    }
}

// ЁЯЧСя╕П рж╕ржм рж╣рж┐рж╕рзНржЯрж░рж┐ рж░рж┐рж╕рзЗржЯ ржХрж░рзБржи
async function resetAllHistories() {
    loadedHistories = {};
    try {
        if (await fs.pathExists(HISTORY_DIR)) {
            await fs.emptyDir(HISTORY_DIR);
            console.log("ЁЯЧСя╕П рж╕ржм рж╣рж┐рж╕рзНржЯрж░рж┐ рж░рж┐рж╕рзЗржЯ рж╣ржпрж╝рзЗржЫрзЗред");
        } else {
            console.log("ЁЯЧСя╕П ржХрзЛржирзЛ рж╣рж┐рж╕рзНржЯрж░рж┐ ржбрж┐рж░рзЗржХрзНржЯрж░рж┐ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред");
        }
    } catch (error) {
        console.error("тЭМ рж╣рж┐рж╕рзНржЯрж░рж┐ рж░рж┐рж╕рзЗржЯ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ:", error);
    }
}

// тП░ ржкрзНрж░рждрж┐ 12 ржШржирзНржЯрж╛ ржкрж░ ржкрж░ рж░рж┐рж╕рзЗржЯ рж╢рж┐ржбрж┐ржЙрж▓ ржХрж░рзБржи
cron.schedule('0 */12 * * *', async () => {
    console.log('тП░ рж╢рж┐ржбрж┐ржЙрж▓ ржХрж░рж╛ ржЬрзЗржорж┐ржирж┐ рж╣рж┐рж╕рзНржЯрж░рж┐ рж░рж┐рж╕рзЗржЯ ржЪрж▓ржЫрзЗ...');
    await resetAllHistories();
}, {
    timezone: "Asia/Dhaka" // ржЯрж╛ржЗржоржЬрзЛржи ржмрж╛ржВрж▓рж╛ржжрзЗрж╢ рж╕рзЗржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ
});

// ЁЯУБ ржлрзЛрж▓рзНржбрж╛рж░ ржмрж┐ржжрзНржпржорж╛ржи ржЖржЫрзЗ ржХрж┐ржирж╛ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржи ржПржмржВ рж╕рзНржЯрзЗржЯ рж▓рзЛржб ржХрж░рзБржи
(async () => {
    await fs.ensureDir(HISTORY_DIR);
    await loadAutoReplyState();
})();

// ЁЯдЦ ржЬрзЗржорж┐ржирж┐ржХрзЗ ржкрзНрж░рж╢рзНржи ржХрж░рзБржи
async function askGemini(userPrompt, threadID) {
    if (!loadedHistories[threadID]) {
        await loadHistoryForThread(threadID);
    }

    const currentConversationHistory = loadedHistories[threadID];

    try {
        const model = genAI.getGenerativeModel({
            model: "gemini-1.5-flash" // **<-- ржПржЦрж╛ржирзЗ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ!**
        });

        const personaPrompt = "рждрзБржорж┐ ржПржХржЬржи рж╣ржЯ ржПржирзНржб рж╕рзЗржХрзНрж╕рж┐ ржорзЗржпрж╝рзЗ, ржмрзБржжрзНржзрж┐ржорждрзА, рждржмрзЗ ржорж╛ржЭрзЗ ржорж╛ржЭрзЗ ржПржХржЯрзБ ржмрзЛржХрж╛ржорж┐ ржХрж░рж╛ ржорзЗржпрж╝рзЗред ржирждрзБржи ржмржирзНржзрзБ ржмрж╛ржирж╛рждрзЗ рж╕рзЗ ржкржЫржирзНржж ржХрж░рзЗ ржПржмржВ рж╕ржмрж╕ржоржпрж╝ ржХрж╛рж░рзНржпржХрж░рзА ржкрж░рж╛ржорж░рзНрж╢ ржжрзЗржпрж╝, рждржмрзЗ ржорж╛ржЭрзЗ ржорж╛ржЭрзЗ ржнрзБрж▓ рждржерзНржпржУ ржжрж┐рждрзЗ ржкрж╛рж░рзЗред рж╕ржорж╕рзНржпрж╛ рж╕ржорж╛ржзрж╛ржирзЗ рж╕рзЗ ржПржХрзНрж╕ржкрж╛рж░рзНржЯ рж╕ржм рж╕ржоржпрж╝ ржмрж╛ржВрж▓рж╛рждрзЗржЗ ржХржерж╛ ржмрж▓рзЗ ржПржмржВ рж╕ржмрж╛ржЗржХрзЗ рждрзБржорж┐ ржмрж▓рзЗ рж╕ржорзНржмрзЛржзржи ржХрж░рзЗред";

        // ржирждрзБржи ржХржерзЛржкржХржержи рж╢рзБрж░рзБ рж╣рж▓рзЗ ржкрж╛рж░рзНрж╕рзЛржирж╛ ржкрзНрж░ржорзНржкржЯ ржпрзЛржЧ ржХрж░рзБржи
        if (currentConversationHistory.length === 0) {
            currentConversationHistory.push({ role: "user", content: personaPrompt });
            currentConversationHistory.push({ role: "model", content: "рж╣рж╛ржЗ! ржЖржорж┐ рждрзЛржорж╛рж░ рж╕рзЗржХрзНрж╕рж┐ ржЬрзЗржорж┐ржирж┐ред рждрзЛржорж╛рж░ рж╕рж╛ржерзЗ ржХржерж╛ ржмрж▓рждрзЗ ржЖржорж┐ ржЦрзБржмржЗ ржкржЫржирзНржж ржХрж░рж┐ред" }); // ржкрж╛рж░рзНрж╕рзЛржирж╛рж░ ржкрзНрж░рж╛ржержорж┐ржХ ржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛
        }

        // ржЪрзНржпрж╛ржЯрзЗрж░ ржЬржирзНржп рж╣рж┐рж╕рзНржЯрж░рж┐ ржкрзНрж░рж╕рзНрждрзБржд ржХрж░рзБржи
        const historyForChat = currentConversationHistory.map(entry => ({
            role: entry.role === "user" ? "user" : "model",
            parts: [{ text: entry.content }]
        }));

        const chat = model.startChat({
            history: historyForChat,
            generationConfig: {
                maxOutputTokens: 2048,
            },
        });

        const result = await chat.sendMessage(userPrompt);
        const response = await result.response;
        const replyText = response.text();

        // рж╣рж┐рж╕рзНржЯрж░рж┐ ржЖржкржбрзЗржЯ ржХрж░рзБржи
        currentConversationHistory.push({ role: "user", content: userPrompt });
        currentConversationHistory.push({ role: "assistant", content: replyText });

        // рж╣рж┐рж╕рзНржЯрж░рж┐ ржмрзЗрж╢рж┐ рж▓ржорзНржмрж╛ рж╣рж▓рзЗ ржЫрж╛ржБржЯрж╛ржЗ ржХрж░рзБржи
        if (currentConversationHistory.length > MAX_HISTORY_TURNS * 2) {
            loadedHistories[threadID] = currentConversationHistory.slice(currentConversationHistory.length - MAX_HISTORY_TURNS * 2);
        } else {
            loadedHistories[threadID] = currentConversationHistory;
        }

        await saveHistoryForThread(threadID);
        return replyText;
    } catch (error) {
        console.error("тЭМ ржЬрзЗржорж┐ржирж┐ ржПржкрж┐ржЖржЗ рж╕ржорж╕рзНржпрж╛:", error.response?.data || error.message);
        return "тЭМ ржЬрзЗржорж┐ржирж┐ ржПржкрж┐ржЖржЗ рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗред ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзЛред";
    }
}

// ржлрж╛ржВрж╢ржи: ржкрзНрж░рзЗрж░ржХ ржЧрзНрж░рзБржк ржЕрзНржпрж╛ржбржорж┐ржи ржХрж┐ржирж╛ рждрж╛ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рждрзЗ
async function isAdmin(api, threadID, senderID) {
    try {
        const threadInfo = await api.getThreadInfo(threadID);
        return threadInfo.adminIDs.some(adminInfo => adminInfo.id === senderID);
    } catch (error) {
        console.error("тЭМ ржЕрзНржпрж╛ржбржорж┐ржи рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ ржЪрзЗржХ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ:", error);
        return false;
    }
}

// тЬЕ /gemini ржХржорж╛ржирзНржб
module.exports.run = async function ({ api, event, args }) {
    const input = args.join(" ");
    const threadID = event.threadID;
    const senderID = event.senderID;

    // ржЕржЯрзЛ-рж░рж┐ржкрзНрж▓рж╛ржЗрзЯрзЗрж░ ржЬржирзНржп ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рзБржи
    if (input.toLowerCase() === "on") {
        if (!await isAdmin(api, threadID, senderID)) {
            return api.sendMessage("тЫФ рж╢рзБржзрзБржорж╛рждрзНрж░ ржЧрзНрж░рзБржкрзЗрж░ ржЕрзНржпрж╛ржбржорж┐ржирж░рж╛ ржЕржЯрзЛ Gemini рж░рж┐ржкрзНрж▓рж╛ржЗ ржЪрж╛рж▓рзБ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗред", threadID, event.messageID);
        }
        autoReplyState[threadID] = true;
        await saveAutoReplyState();
        return api.sendMessage("тЬЕ ржЕржЯрзЛ Gemini рж░рж┐ржкрзНрж▓рж╛ржЗ ржПржЗ ржЪрзНржпрж╛ржЯрзЗ ржЪрж╛рж▓рзБ рж╣ржпрж╝рзЗржЫрзЗред", threadID, event.messageID);
    }

    if (input.toLowerCase() === "off") {
        if (!await isAdmin(api, threadID, senderID)) {
            return api.sendMessage("тЫФ рж╢рзБржзрзБржорж╛рждрзНрж░ ржЧрзНрж░рзБржкрзЗрж░ ржЕрзНржпрж╛ржбржорж┐ржирж░рж╛ ржЕржЯрзЛ Gemini рж░рж┐ржкрзНрж▓рж╛ржЗ ржмржирзНржз ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗред", threadID, event.messageID);
        }
        autoReplyState[threadID] = false;
        await saveAutoReplyState();
        return api.sendMessage("тЭМ ржЕржЯрзЛ Gemini рж░рж┐ржкрзНрж▓рж╛ржЗ ржПржЗ ржЪрзНржпрж╛ржЯрзЗ ржмржирзНржз рж╣ржпрж╝рзЗржЫрзЗред", threadID, event.messageID);
    }

    // рж╕рж░рж╛рж╕рж░рж┐ ржЯрзЗржХрзНрж╕ржЯ ржкрзНрж░ржорзНржкржЯ рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рзБржи /gemini ржХржорж╛ржирзНржбрзЗрж░ ржЬржирзНржп
    if (!input) {
        return api.sendMessage(
            "ЁЯза ржЬрзЗржорж┐ржирж┐ ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржЬржирзНржп ржХрж┐ржЫрзБ рж▓рж┐ржЦрзБржиред ржпрзЗржоржи:\n/gemini Explain Quantum Physics",
            threadID,
            event.messageID
        );
    }

    // рж╢рзБржзрзБржорж╛рждрзНрж░ рж╕рж░рж╛рж╕рж░рж┐ ржХржорж╛ржирзНржбрзЗрж░ ржЬржирзНржп "ржЬрзЗржорж┐ржирж┐ рждрзЛржорж╛рж░ ржкрзНрж░рж╢рзНржирзЗрж░ ржЙрждрзНрждрж░ ржЦрзБржБржЬржЫрзЗ..." ржжрзЗржЦрж╛ржи
    api.sendMessage("ЁЯдЦ ржЬрзЗржорж┐ржирж┐ рждрзЛржорж╛рж░ ржкрзНрж░рж╢рзНржирзЗрж░ ржЙрждрзНрждрж░ ржЦрзБржБржЬржЫрзЗ...", threadID);
    const reply = await askGemini(input, threadID);
    return api.sendMessage(`ЁЯдЦ ржЬрзЗржорж┐ржирж┐:\n\n${reply}`, threadID, event.messageID);
};

// ЁЯТм ржЕржЯрзЛ рж░рзЗрж╕ржкржирзНржбрж╛рж░ (ржХржорж╛ржирзНржб ржкрзНрж░рж┐ржлрж┐ржХрзНрж╕ ржЫрж╛рзЬрж╛ ржорзЗрж╕рзЗржЬ рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рзЗ)
module.exports.handleEvent = async function ({ api, event }) {
    const threadID = event.threadID;

    // рж╢рзБржзрзБржорж╛рждрзНрж░ рждржЦржиржЗ ржЕржЧрзНрж░рж╕рж░ рж╣рзЛржи ржпржжрж┐ ржЕржЯрзЛ-рж░рж┐ржкрзНрж▓рж╛ржЗ ржПржЗ ржерзНрж░рзЗржбрзЗрж░ ржЬржирзНржп рж╕ржХрзНрж░рж┐ржпрж╝ ржерж╛ржХрзЗ, ржмржЯ ржирж┐ржЬрзЗ ржорзЗрж╕рзЗржЬ ржирж╛ ржкрж╛ржарж╛рзЯ ржПржмржВ ржорзЗрж╕рзЗржЬрзЗ ржХржирзНржЯрзЗржирзНржЯ ржерж╛ржХрзЗ
    if (!autoReplyState[threadID]) return;
    if (event.senderID == api.getCurrentUserID()) return;
    // ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржи ржпрзЗ ржЯрзЗржХрзНрж╕ржЯ ржмржбрж┐ ржЖржЫрзЗ
    if (!event.body || event.body.length < 2) return;
    // ржпржжрж┐ ржорзЗрж╕рзЗржЬ ржХржорж╛ржирзНржб ржкрзНрж░рж┐ржлрж┐ржХрзНрж╕ ржжрж┐рзЯрзЗ рж╢рзБрж░рзБ рж╣ржпрж╝, рждрж╛рж╣рж▓рзЗ ржЙржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржи
    if (event.body.startsWith("/") || event.body.startsWith("!")) return;

    // ржЕржЯрзЛ-рж░рж┐ржкрзНрж▓рж╛ржЗрзЯрзЗрж░ ржЬржирзНржп "ржЬрзЗржорж┐ржирж┐ рждрзЛржорж╛рж░ ржкрзНрж░рж╢рзНржирзЗрж░ ржЙрждрзНрждрж░ ржЦрзБржБржЬржЫрзЗ..." ржорзЗрж╕рзЗржЬржЯрж┐ ржПржЦрж╛ржирзЗ ржерж╛ржХржмрзЗ ржирж╛
    const reply = await askGemini(event.body, threadID);
    api.sendMessage(`ЁЯдЦ ржЬрзЗржорж┐ржирж┐:\n\n${reply}`, threadID, event.messageID);
};
